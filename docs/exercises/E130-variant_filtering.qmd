---
engine: knitr
---

```{bash }
#| label: E130-data-setup
#| echo: false
#| eval: true
for f in ../data/data/ooa-outgroups/[CY]*.bam*; do
	ln -f -s $(realpath $f) ./$(basename $f)
done
```


# Variant filtering {#sec-E130-variant_filtering}

::: {.callout-warning}

## FIXME

Discuss different types of relevant filters, e.g.

- filtering on read depth, both high to eliminate collapsed repeats,
  and low for mappability issues. This is particularly important for
  incomplete assemblies


:::

### Intended learning outcomes

- create per-sample and total depth of coverage profiles
- generate mask files for downstream processing


### Tools

- [mosdepth](https://github.com/brentp/mosdepth)  [@pedersen_MosdepthQuickCoverage_2018]
- [d4-tools](https://github.com/38/d4-format) [@hou_BalancingEfficientAnalysis_2021]
- [samtools](https://github.com/samtools/samtools) [@danecek_TwelveYearsSAMtools_2021]
- [csvtk](https://bioinf.shenwei.me/csvtk/)
- [bedtools](https://bedtools.readthedocs.io/en/latest/index.html) [@quinlan_BEDToolsFlexibleSuite_2010]


## Coverage analyses

It is often the case that raw variant calls need filtering before
proceeding with downstream analyses (REF). Reasons may vary but
include uneven mapping coverage due to repeat regions, low coverage
due to mis-assemblies, or coverage biases generated in the sequencing
process. Importantly, both variable and monomorphic sites must be
treated identically to avoid selection biases.

In this part, we will use `mosdepth` and `d4tools` to quickly generate
depth of coverage profiles of mapped data. `mosdepth` is an ultra-fast
command line tool for calculating coverage from a bam file. It can
output results in a highly compressed format `d4`, which has been
developed to handle the ever increasing size of resequencing projects.
Files in d4 format can be with by the `d4tools` tool.

For downstream purposes, we need to save the size of the chromosomes
we're looking at:
```{bash }
#| label: samtools-view-header
#| echo: true
#| eval: true
#| code-fold: false
samtools view CEU-1.ooa.chr21.bam -H | grep SQ | awk '{OFS="\t";print $2, $3}' | sed -e "s/[SNL:]//g" > genome.txt
```

We then start by calculating per-base coverage for one of the samples
(syntax is `mosdepth <prefix> <input file>`), excluding reads with a
mapping quality less than 20 (`-Q` flag):

```{bash }
#| label: mosdepth-one-sample
#| echo: true
#| eval: true
mosdepth -Q 20 --d4 CEU-1 CEU-1.ooa.chr21.bam
```

The d4 output file will be named `CEU-1.per-base.d4` and can be viewed
with `d4tools` to generate `bed` representation of the coverage:

```{bash }
#| label: d4tools-view-sample
#| echo: true
#| eval: true
d4tools view CEU-1.per-base.d4 | head -n 5
```

To get an idea of what the coverage looks like over the chromsome, we
can use `bedtools` and `cvstk` in a one-liner to generate a simple
coverage plot (@fig-plot-coverage).

```{bash }
#| label: bash-plot-coverage
#| echo: true
#| eval: false
#| fig-show: asis
#| fig-cap: Coverage for sample CEU-1 in 5kb windows. Experiment changing the window size (`-w`) parameter to change smoothing.
bedtools intersect -a <(bedtools makewindows -g genome.txt -w 5000) \
		 -b <(d4tools view CEU-1.per-base.d4) -wa -wb | \
	bedtools groupby -i - -g 1,2,3 -c 7 -o mean | \
	csvtk plot -t line -x 2 -y 4 --point-size 0.01 --xlab Position \
		  --ylab Coverage --width 9.0 --height 3.5 > fig-plot-coverage.png
```

::: {#fig-plot-coverage attr-output='.details summary="Output"'}

![](fig-plot-coverage.png)

Coverage for sample CEU-1 in 5kb windows. Experiment changing the window size (`-w`) parameter to change smoothing.
:::

Apparently there are some high-coverage regions that could be
associated with, e.g., collapsed repeat regions in the assembly. Let's
compile coverage results for all samples.

```{bash }
#| label: mosdepth-compile-coverage-data
#| echo: true
#| eval: true
for f in *.bam; do
	mosdepth -Q 20 --d4 ${f%.ooa.chr21.bam} $f
	echo -e -n "${f%.ooa.chr21.bam}\t"
	cat ${f%.ooa.chr21.bam}.mosdepth.summary.txt | grep total
done
```


::: {.notes }

See
https://evomics.org/learning/population-and-speciation-genomics/2018-population-and-speciation-genomics/psmc-msmc-activity/
for information on coverage and accessibility masks.

Also https://github.com/stschiff/msmc-tools/blob/master/README.md and Heng Li's snpable https://lh3lh3.users.sourceforge.net/snpable.shtml

:::



