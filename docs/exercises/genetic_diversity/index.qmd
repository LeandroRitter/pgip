---
title: Genetic diversity landscapes
subtitle: Investigating the diversity landscape in Monkeyflower
author:
  - Per Unneberg
format: html
engine: knitr
execute:
  cache: false
---

<!-- markdownlint-disable MD041 -->

{{< include ../_knitr.qmd >}}

{{< include ../_rlibs.qmd >}}

{{< include _rcustom.qmd >}}

<!-- markdownlint-enable MD041 -->

::: {.callout-important collapse=true}

#### Compute environment setup

If you haven't already done so, please read [Compute
environment](../compute_environment/index.qmd) for information on how
to prepare your working directory.

:::

In this exercise we will look at measures that describe variation and
compile statistics along a sequence. By scanning variation in windows
along the sequence (a.k.a. genomic scan) we can identify outlier
regions whose pattern of variation could potentially be attributed to
causes other than neutral processes, such as adaptation or migration.
We will use the Monkeyflower system to generate a diversity landscape.

::: {.callout-important}

The commands of this document have been run on a subset (a subregion)
of the data. Therefore, although you will use the same commands, your
results will differ from those presented here.

:::

::: {.callout-tip collapse=true}

## Learning objectives

- describe and calculate commonly used measures of variation,
  including nucleotide diversity $\pi$, divergence $d_{XY}$ and
  differentiation $F_{ST}$
- perform genome scans of diversity and plot the results
- identify outlier regions of interest
- untangle processes that drive patterns of variation using simulated
  data

:::

::: {.callout-note collapse=true}

## Data setup

:::{.panel-tabset}

#### {{< fa server >}} UPPMAX

<!-- markdownlint-disable MD038 -->

Move to your course working directory `/proj/{{< var uppmaxproject
>}}/users/USERNAME`, create an exercise directory called
`monkeyflower` and `cd` to it:

<!-- markdownlint-enable MD038 -->

```bash
cd /proj/{{< var uppmaxproject >}}/users/USERNAME
mkdir -p monkeyflower
cd monkeyflower
```

Retrieve the data with `rsync`. You can use the `--dry-run` option to
see what is going to happen; just remove it when you are content:

```bash
# Remove the dry run option to retrieve data
rsync --dry-run -av \
      /proj/{{< var uppmaxproject >}}/webexport/monkeyflower/LG4/* .
```

#### {{< fa laptop >}} Local

Create an exercise directory called `monkeyflower` and `cd` to it:

```{bash }
#| label: create-monkeyflower-directory-local
#| echo: true
#| eval: false
mkdir -p monkeyflower
cd monkeyflower
```

Retrieve the variant files from `{{< var webexport.url
>}}/monkeyflower/LG4` with `wget`^[The password is provided
by the course instructor]:

```bash
wget --user pgip --password PASSWORD \
     --recursive --accept='*.*' \
     --reject='*.gif','index*' \
  --no-parent --no-directories \
     --no-clobber \
     --directory-prefix=. \
     {{< var webexport.url >}}/monkeyflower/LG4/
```

:::

:::

::: {.callout-note collapse=true}

## Tools

::: { .panel-tabset }

#### Listing

- [bcftools](https://samtools.github.io/bcftools/bcftools.html) [@danecek_TwelveYearsSAMtools_2021]
- [bedtools](https://bedtools.readthedocs.io/en/latest/index.html) [@quinlan_BEDToolsFlexibleSuite_2010]
- [csvtk](https://bioinf.shenwei.me/csvtk/)
- [vcftools](https://vcftools.github.io/) [@danecek_VariantCallFormat_2011]

#### {{< fa server >}} UPPMAX modules

Execute the following command to load modules:

```{bash }
#| label: uppmax-load-modules
#| echo: true
#| eval: false
module load uppmax bioinfo-tools \
    bcftools/1.17 \
    BEDTools/2.29.2 \
    vcftools/0.1.16 \
    pixy/1.2.5.beta1
```

`csvtk` has been added to the module system and can be loaded as
follows:

```bash
module use /proj/{{< var uppmaxproject >}}/modules
module load csvtk
```

#### {{< fa laptop >}} Conda

Copy the contents to a file `environment.yml` and install packages
with `mamba env update -f environment.yml`.

```{lang="text" }
channels:
  - conda-forge
  - bioconda
  - default
dependencies:
  - bcftools=1.15.1
  - bedtools=2.31.0
  - csvtk=0.28.0
  - vcftools=0.1.16
```

There is no `pixy` Conda package for Python >= 3.9, so it must be
manually installed with `pip`:

```{bash }
#| label: pip-install-pixy
#| echo: true
#| eval: false
python -m pip install git+https://github.com/ksamuk/pixy.git
```

:::

:::

```{bash }
#| label: variant-filter-setup
#| echo: false
#| eval: true
mkdir -p vcftools
OUT=vcftools/allsites
VCF=allsites.vcf.gz
MISS=0.75
QUAL=30
MIN_DEPTH=260
MAX_DEPTH=400
OUTVCF=${VCF%.vcf.gz}.filtered.vcf.gz
vcftools --gzvcf $VCF \
   --remove-indels --max-missing $MISS --minQ $QUAL \
   --min-meanDP $MIN_DEPTH --max-meanDP $MAX_DEPTH \
   --minDP $MIN_DEPTH --maxDP $MAX_DEPTH --recode \
   --stdout 2>/dev/null |
 gzip -c > $OUTVCF
```

## Generating and visualisation of diversity statistics

### Compiling statistics with vcftools

Create an output directory for the results and define some environment variables:

```{bash }
#| label: 01-vcftools
#| echo: true
#| eval: true
mkdir -p 01-vcftools
OUT=01-vcftools/allsites
```

```{r }
#| label: 01-vcftools-setenv
#| echo: false
#| eval: true
#| cache: false
Sys.setenv(
  OUT = "01-vcftools/allsites",
  VCF = "allsites.vcf.gz"
)
```

#### Nucleotide diversity ($\pi$)

Nucleotide diversity can be calculated by site (`--site-pi`) or in
windows (`--window-pi`).

```{bash }
#| label: 01-vcftools-site-pi
#| echo: true
#| eval: true
vcftools --gzvcf $VCF --site-pi --out $OUT 2> /dev/null
csvtk summary $OUT.sites.pi -i -t -f PI:mean,PI:stdev
```

```{bash }
#| label: 01-vcftools-window-pi
#| echo: true
#| eval: true
# Set your window size higher, e.g., 10kb
vcftools --gzvcf $VCF --window-pi 1000 --out $OUT 2> /dev/null
```

::: {.callout-note collapse=true}

#### On genome scans and window sizes

Genetic diversity estimates can be noisy, so we often want to compute
values in sliding windows across a sequence. Choosing window size can
be as simple as trying out different values, often ranging from single
to several hundred kilobases. As always, the appropriate size depends
on the analyses.

One rule of thumb that can be applied is that the window size should
be larger than the genomic background of linkage disequilibrium (LD).
Recall, LD is the non-random co-segregation of alleles at two or more
loci. Linked loci will induce correlations in window-based statistics,
so by choosing a window size larger than the LD background, we ensure
that our windows are, in some sense, independent.

:::

Even though single point summary statistics can be informative, we can
get an overview of the distribution over the chromosome by plotting:

```{bash }
#| label: 01-vcftools-window-pi-plot
#| echo: true
#| eval: true
csvtk plot line -t $OUT.windowed.pi -x BIN_START -y PI \
   --point-size 0.01 --xlab "Position (bp)" \
   --ylab "Diversity" --title LG4 --width 9.0 --height 3.5 \
   > $OUT.png
```

::: {#fig-01-vcftools-window-pi attr-output='.details summary="Output"'}

![](01-vcftools/allsites.png)

Nucleotide diversity across LG4.

:::

#### $F_{ST}$

Since $F_{ST}$ is a statistic that compares populations, we must
supply two or more of the population files we defined above. A
population file name is passed to the `--weir-fst-pop` option.
Calculations are done by site per default, but let's calculate
$F_{ST}$ for a comparison of two populations in 100kb windows^[Recall;
the dataset used to render these pages is much smaller, which is why
we use a smaller window size below. Consequently, your plot will look
different.]:

```{bash }
#| label: 01-vcftools-fst
#| echo: true
#| eval: true
#| results: hide
# Set your window size higher, e.g., 100000
vcftools --gzvcf $VCF --weir-fst-pop PUN-R.txt \
   --weir-fst-pop PUN-Y.txt \
   --fst-window-size 1000 \
   --out $OUT
```

```{bash }
#| label: 01-vcftools-fst-plot
#| echo: true
#| eval: true
csvtk plot line -t $OUT.windowed.weir.fst -x BIN_START -y MEAN_FST \
   --point-size 0.01 --xlab "Position (bp)" \
   --ylab "Fst" --title LG4 --width 9.0 --height 3.5 \
   > $OUT.windowed.weir.fst.mean.png
```

::: {#fig-01-vcftools-fst attr-output='.details summary="Output"'}

![](01-vcftools/allsites.windowed.weir.fst.mean.png)

Mean $F_{ST}$ across LG4.

:::

### Compiling statistics with pixy

[pixy](https://pixy.readthedocs.io/en/latest/about.html) facilitates
the calculation of nucleotide diversity within $\pi$ and between
$d_{XY}$ populations from a VCF, as well as differentiation ($F_{ST}$).
It takes invariant sites and missing data into consideration.

Calculating per-site statistics takes too long time, so we will only
generate windowed output here. This may still take a couple of minutes
though.

```{bash }
#| label: 02-pixy
#| echo: true
#| eval: true
#| results: hide
mkdir -p 02-pixy
grep PUN populations.txt > populations.PUN.txt
# Set your window size higher, e.g., 100kb
pixy --stats pi fst dxy \
  --vcf $VCF \
  --populations populations.PUN.txt \
  --window_size 1000 \
  --output_folder 02-pixy \
  --n_cores 4
```

```{bash }
#| label: 02-pixy-pi-head
#| echo: true
#| eval: true
head -n 3 02-pixy/pixy_pi.txt
```

For windowed output, the pixy output files contain information on the
windows, the number of missing sites, number of snps, and more. For a
full description, consult the
[documentation](https://pixy.readthedocs.io/en/latest/output.html).
Note that because we provided a population file defining two
populations, diversity is calculated per population.

We conclude by plotting diversity

```{bash }
#| label: 02-pixy-pi-plot
#| echo: true
#| eval: true
#| results: hide
# Possibly remove NA values that otherwise would throw error
csvtk filter2 -t -f '$avg_pi != "NA" ' 02-pixy/pixy_pi.txt | \
 csvtk plot line -t - -x window_pos_1 -y avg_pi \
    --group-field pop \
    --point-size 0.01 --xlab "Position (bp)" \
    --ylab "Diversity" --title LG4 --width 9.0 --height 3.5 \
    > 02-pixy/pixy_pi.PUN.txt.png
```

::: {#fig-02-pixy-fst attr-output='.details summary="Output"'}

![](02-pixy/pixy_pi.PUN.txt.png)

Mean diversity across LG4 for red and yellow ecotypes.

:::

and $F_{ST}$ comparing red and yellow

```{bash }
#| label: 02-pixy-fst-plot
#| echo: true
#| eval: true
csvtk filter2 -t -f '$avg_wc_fst != "NA" ' 02-pixy/pixy_fst.txt | \
 csvtk plot line -t - -x window_pos_1 -y avg_wc_fst \
    --point-size 0.01 --xlab "Position (bp)" \
    --ylab "Fst" --title LG4 --width 9.0 --height 3.5 \
    > 02-pixy/pixy_fst.txt.png
```

::: {#fig-02-pixy-fst attr-output='.details summary="Output"'}

![](02-pixy/pixy_fst.txt.png)

Mean $F_{ST}$ across LG4.

:::

:::{.hidden}

### Reconciling results with filters

Show how we can reconcile results? After all, pixy cannot be used for
species that lack variant sites

### Genome scan with vcftools

Since pixy takes care of everything, run Tajima's with vcftools?

### Outlier analyses

Must introduce Z-transformed stats and explain; hopefully region in
paper shows up

:::
