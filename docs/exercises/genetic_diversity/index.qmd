---
title: Genetic diversity landscapes
subtitle: Investigating the diversity landscape in Monkeyflower
author:
  - Per Unneberg
format: html
engine: knitr
execute:
  cache: false
---

<!-- markdownlint-disable MD041 -->

{{< include ../_knitr.qmd >}}

{{< include ../_rlibs.qmd >}}

{{< include _rcustom.qmd >}}

<!-- markdownlint-enable MD041 -->

::: {.callout-important collapse=true}

#### Compute environment setup

If you haven't already done so, please read [Compute
environment](../compute_environment/index.qmd) for information on how
to prepare your working directory.

:::

In this exercise we will look at measures that describe variation and
compile statistics along a sequence. By scanning variation in windows
along the sequence (a.k.a. genomic scan) we can identify outlier
regions whose pattern of variation could potentially be attributed to
causes other than neutral processes, such as adaptation or migration.
We will use the Monkeyflower system to generate a diversity landscape.

::: {.callout-important}

The commands of this document have been run on a subset (a subregion)
of the data. Therefore, although you will use the same commands, your
results will differ from those presented here.

:::

::: {.callout-tip collapse=true}

## Learning objectives

- describe and calculate commonly used measures of variation,
  including nucleotide diversity $\pi$, divergence $d_{XY}$ and
  differentiation $F_{ST}$
- perform genome scans of diversity and plot the results
- identify outlier regions of interest
- untangle processes that drive patterns of variation using simulated
  data

:::

::: {.callout-note collapse=true}

## Data setup

:::{.panel-tabset}

#### {{< fa server >}} UPPMAX

<!-- markdownlint-disable MD038 -->

Move to your course working directory `/proj/{{< var uppmaxproject
>}}/users/USERNAME`, create an exercise directory called
`monkeyflower` and `cd` to it:

<!-- markdownlint-enable MD038 -->

```bash
cd /proj/{{< var uppmaxproject >}}/users/USERNAME
mkdir -p monkeyflower
cd monkeyflower
```

Retrieve the data with `rsync`. You can use the `--dry-run` option to
see what is going to happen; just remove it when you are content:

```bash
# Remove the dry run option to retrieve data
rsync --dry-run -av \
      /proj/{{< var uppmaxproject >}}/webexport/monkeyflower/LG4/* .
```

#### {{< fa laptop >}} Local

Create an exercise directory called `monkeyflower` and `cd` to it:

```{bash }
#| label: create-monkeyflower-directory-local
#| echo: true
#| eval: false
mkdir -p monkeyflower
cd monkeyflower
```

Retrieve the variant files from `{{< var webexport.url
>}}/monkeyflower/LG4` with `wget`^[The password is provided
by the course instructor]:

```bash
wget --user pgip --password PASSWORD \
     --recursive --accept='*.*' \
     --reject='*.gif','index*' \
  --no-parent --no-directories \
     --no-clobber \
     --directory-prefix=. \
     {{< var webexport.url >}}/monkeyflower/LG4/
```

:::

:::

::: {.callout-note collapse=true}

## Tools

::: { .panel-tabset }

#### Listing

- [bcftools](https://samtools.github.io/bcftools/bcftools.html) [@danecek_TwelveYearsSAMtools_2021]
- [bedtools](https://bedtools.readthedocs.io/en/latest/index.html) [@quinlan_BEDToolsFlexibleSuite_2010]
- [csvtk](https://bioinf.shenwei.me/csvtk/)
- [vcftools](https://vcftools.github.io/) [@danecek_VariantCallFormat_2011]

#### {{< fa server >}} UPPMAX modules

Execute the following command to load modules:

```{bash }
#| label: uppmax-load-modules
#| echo: true
#| eval: false
module load uppmax bioinfo-tools \
    bcftools/1.17 \
    BEDTools/2.29.2 \
    vcftools/0.1.16 \
    pixy/1.2.5.beta1
```

`csvtk` has been added to the module system and can be loaded as
follows:

```bash
module use /proj/{{< var uppmaxproject >}}/modules
module load csvtk
```

#### {{< fa laptop >}} Conda

Copy the contents to a file `environment.yml` and install packages
with `mamba env update -f environment.yml`.

```{lang="text" }
channels:
  - conda-forge
  - bioconda
  - default
dependencies:
  - bcftools=1.15.1
  - bedtools=2.31.0
  - csvtk=0.28.0
  - vcftools=0.1.16
```

There is no `pixy` Conda package for Python >= 3.9, so it must be
manually installed with `pip`:

```{bash }
#| label: pip-install-pixy
#| echo: true
#| eval: false
python -m pip install git+https://github.com/ksamuk/pixy.git
```

:::

:::

```{bash }
#| label: variant-filter-setup
#| echo: false
#| eval: true
mkdir -p vcftools
OUT=vcftools/allsites
VCF=allsites.vcf.gz
MISS=0.75
QUAL=30
MIN_DEPTH=260
MAX_DEPTH=400
OUTVCF=${VCF%.vcf.gz}.filtered.vcf.gz
vcftools --gzvcf $VCF \
   --remove-indels --max-missing $MISS --minQ $QUAL \
   --min-meanDP $MIN_DEPTH --max-meanDP $MAX_DEPTH \
   --minDP $MIN_DEPTH --maxDP $MAX_DEPTH --recode \
   --stdout 2>/dev/null |
 gzip -c > $OUTVCF
```

## Preparation

In this exercise, we will be analysing the full data set for linkage
group 4 (LG4), consisting of all 37 samples.

```{bash }
#| label: bcftools-generate-stats
#| echo: false
#| eval: true
#| results: hide
bcftools stats allsites.vcf.gz > allsites.vcf.gz.bcftools.stats
```

```{r }
#| label: tbl-r-bcftools-summarise-vcfs
#| echo: false
#| eval: true
#| tbl-cap: Summary of VCF files
read_bcftools <- function(fn, stat = "SN") {
  x <- readLines(fn)
  cbind(fn, read.table(textConnection(x[grep(stat, x)]), sep = "\t"))
}
vcfs <- list.files(pattern = "vcf.gz.bcftools.stats$")
x <- tibble(do.call("rbind", lapply(vcfs, read_bcftools)))
colnames(x) <- c("Filename", "SN", "id", "key", "value")
x %>%
  mutate(across("Filename", str_replace, ".bcftools.stats", "")) %>%
  mutate(across("key", str_replace, "number of ", "")) %>%
  mutate(across("key", str_replace, ":", "")) %>%
  filter(key == "records" | key == "samples") %>%
  pivot_wider(names_from = key, values_from = value) %>%
  select(Filename, records, samples) %>%
  kable()
```

Some of the programs require we prepare population files. For `pixy`,
this is a headerless, tab-separated file with sample and population
columns. The `sampleinfo.csv` file contains the information we need;
the sample names have been prefixed with a three-letter code to
indicate population (apart from *ssp. puniceus* which also comes with
a single letter `R` or `Y` indicating ecotype).
@tbl-sample-populations summarizes the populations and samples.

```{r }
#| label: tbl-sample-populations
#| echo: true
#| eval: true
#| code-fold: true
#| tbl-cap: Summary of populations and samples.
# R code to generate sample population summary
data <- tibble(read.csv("sampleinfo.csv"))
data <- data %>%
  mutate(Population = SampleAlias) %>%
  mutate(across("Population", str_replace, "(.+)-.+$", "\\1")) %>%
  mutate(across("Population", str_replace, "(CLV)_.+", "\\1"))
data %>%
  group_by(Population, ScientificName) %>%
  summarise(n = n(), samples = paste(SampleAlias, collapse = ", ")) %>%
  kable()
```

:::{.column-margin}

![Evolutionary relationships across the radiation](../datasets/assets/images/stankowski-2019-fig1A.png){#fig-evolutionary-relationship}

![Monkeyflower sampling
locations](../../slides/simulation/assets/images/stankowski-2019-figs2.jpg){#fig-monkeyflower-sampling-location}

:::

We convert the sample information with `csvtk`. We also add a
populations file with all samples belonging to the same population:

```{bash }
#| label: make-populations-file
#| echo: true
#| eval: true
csvtk mutate --name Population --fields SampleAlias sampleinfo.csv |
 csvtk cut --fields SampleAlias,Population |
 csvtk replace --fields Population --pattern "(.+)-.+$" --replacement "\$1" |
 csvtk replace --fields Population --pattern "(CLV)_.+" --replacement "\$1" |
 csvtk del-header --out-tabs > populations.txt
csvtk cut --fields SampleAlias sampleinfo.csv |
 csvtk mutate --name Population --fields SampleAlias |
 csvtk replace --fields Population --pattern ".+" --replacement "ALL" |
 csvtk del-header --out-tabs > populations.ALL.txt
```

`vcftools`, on the other hand, requires that populations are specified
as separate files, containing the individuals of each population. We
can use the `populations.txt` file to quickly generate
population-specific files, and we add an `ALL` population, treating
all samples as coming from the same population:

```{bash }
#| label: make-population-specific-files
#| echo: true
#| eval: true
for pop in ARI AUR CAL CLV GRA LON PAR PUN-R PUN-Y; do
 csvtk --no-header-row grep --tabs --fields 2 --pattern "$pop" populations.txt | \
  csvtk cut --tabs --fields 1 > $pop.txt;
done
csvtk cut --tabs --no-header-row --fields 1 populations.txt > ALL.txt
```

We define environment variables to make the downstream commands
easier to type:

```{bash }
#| label: variant-setup
#| echo: true
#| eval: true
VCF=allsites.vcf.gz
POPS=populations.txt
```

```{r }
#| label: set-vcf-envvars
#| echo: false
#| eval: true
#| cache: false
Sys.setenv(
  VCF = "allsites.vcf.gz",
  POPS = "populations.txt"
)
```

## Generating and visualising diversity statistics

### Compiling statistics with vcftools

Create an output directory for the results and define some environment variables:

```{bash }
#| label: 01-vcftools
#| echo: true
#| eval: true
mkdir -p 01-vcftools
OUT=01-vcftools/allsites
```

```{r }
#| label: 01-vcftools-setenv
#| echo: false
#| eval: true
#| cache: false
Sys.setenv(
  OUT = "01-vcftools/allsites",
  VCF = "allsites.vcf.gz"
)
```

#### Nucleotide diversity ($\pi$)

Nucleotide diversity can be calculated by site (`--site-pi`) or in
windows (`--window-pi`)^[Recall; the dataset used to render these
pages is much smaller, which is why we use a smaller window size
below. Consequently, your plot will look different.].

```{bash }
#| label: 01-vcftools-site-pi
#| echo: true
#| eval: true
vcftools --gzvcf $VCF --site-pi --out $OUT 2> /dev/null
csvtk summary $OUT.sites.pi --ignore-non-numbers --tabs \
   --fields PI:mean,PI:stdev
```

```{bash }
#| label: 01-vcftools-window-pi
#| echo: true
#| eval: true
# Set your window size higher, e.g., 10kb
vcftools --gzvcf $VCF --window-pi 1000 --out $OUT 2> /dev/null
```

::: {.callout-note collapse=true}

#### On genome scans and window sizes

Genetic diversity estimates can be noisy, so we often want to compute
values in sliding windows across a sequence. Choosing window size can
be as simple as trying out different values, often ranging from single
to several hundred kilobases. As always, the appropriate size depends
on the analyses.

One rule of thumb that can be applied is that the window size should
be larger than the genomic background of linkage disequilibrium (LD).
Recall, LD is the non-random co-segregation of alleles at two or more
loci. Linked loci will induce correlations in window-based statistics,
so by choosing a window size larger than the LD background, we ensure
that our windows are, in some sense, independent.

For this reason, a common approach is to calculate some measure of LD
between marker pairs, and generate a plot of LD decay. This is outside
the scope of this exercise, but the interested reader can consult the
[plink](https://www.cog-genomics.org/plink2/) documentation for ways
to do this. See also @fig-ld-decay-fuller for an example plot.

:::{.column-margin}

<!-- markdownlint-disable MD013 -->

![Properties of genetic variation and inferred demographic history in
sampled *A. millepora*. @fuller_PopulationGeneticsCoral_2020,
Figure 2. Upper left plot illustrates LD as a function of physical
distance. Here, choosing a window size 20-30kb would ensure that most
windows are independent.](https://www.science.org/cms/10.1126/science.aba4674/asset/661d50bb-a085-41af-abdb-06c487ed4e63/assets/graphic/369_aba4674_f2.jpeg){#fig-ld-decay-fuller}

<!-- markdownlint-enable MD013 -->

:::

:::

Even though single point summary statistics can be informative, we can
get an overview of the distribution over the chromosome by plotting:

```{bash }
#| label: 01-vcftools-window-pi-plot
#| echo: true
#| eval: true
csvtk plot line --tabs $OUT.windowed.pi -x BIN_START -y PI \
   --point-size 0.01 --xlab "Position (bp)" \
   --ylab "Diversity" --title LG4 --width 9.0 --height 3.5 \
   > $OUT.png
```

::: {#fig-01-vcftools-window-pi attr-output='.details summary="Output"'}

![](01-vcftools/allsites.png)

Nucleotide diversity across LG4 for all populations.

:::

@fig-01-vcftools-window-pi shows the diversity for all populations. We
would also be interested in *comparing* the diversity for *different*
populations. This can be achieved by passing a population file to
`bcftools view` and piping (`|`) the output to `vcftools`:

```{bash }
#| label: bcftools-to-vcftools
#| echo: true
#| eval: true
bcftools view -S PAR.txt $VCF |\
 vcftools --vcf - --window-pi 1000 --out $OUT.PAR 2> /dev/null
bcftools view -S ARI.txt $VCF |\
 vcftools --vcf - --window-pi 1000 --out $OUT.ARI 2> /dev/null
```

With some `csvtk` magic we can combine the measures and plot:

```{bash }
#| label: csvtk-plot-ari-par
#| echo: true
#| eval: true
# When assigning a constant
csvtk mutate2 --tabs --name Population --expression " 'ARI' " \
   $OUT.ARI.windowed.pi > $OUT.ARI.wpi
csvtk mutate2 --tabs --name Population --expression " 'PAR' " \
   $OUT.PAR.windowed.pi > $OUT.PAR.wpi
csvtk concat --tabs $OUT.ARI.wpi $OUT.PAR.wpi |\
 csvtk plot --tabs line - -x BIN_START -y PI \
    --group-field Population \
    --point-size 0.01 --xlab "Position (bp)" \
    --ylab "Diversity" --title "LG4:PAR and ARI" \
    --width 9.0 --height 3.5 \
    > $OUT.ARI.PAR.png 2>/dev/null
```

::: {#fig-01-vcftools-window-pi-ARI-PAR attr-output='.details summary="Output"'}

![](01-vcftools/allsites.ARI.PAR.png)

Nucleotide diversity across LG4 comparing populations ARI and PAR.

:::

#### $F_{ST}$

Since $F_{ST}$ is a statistic that compares populations, we must
supply two or more of the population files we defined above. A
population file name is passed to the `--weir-fst-pop` option.
Calculations are done by site per default, but let's calculate
$F_{ST}$ for a comparison of two populations in 100kb windows:

```{bash }
#| label: 01-vcftools-fst
#| echo: true
#| eval: true
#| results: hide
# Set your window size higher, e.g., 100000
vcftools --gzvcf $VCF --weir-fst-pop ARI.txt \
   --weir-fst-pop PAR.txt \
   --fst-window-size 1000 \
   --out $OUT.ARI-PAR
```

```{bash }
#| label: 01-vcftools-fst-plot
#| echo: true
#| eval: true
csvtk plot line --tabs $OUT.ARI-PAR.windowed.weir.fst \
   -x BIN_START -y MEAN_FST \
   --point-size 0.01 --xlab "Position (bp)" \
   --ylab "Fst" --title "LG4:ARI vs PAR" \
   --width 9.0 --height 3.5 \
   > $OUT.ARI-PAR.windowed.weir.fst.mean.png
```

::: {#fig-01-vcftools-fst attr-output='.details summary="Output"'}

![](01-vcftools/allsites.ARI-PAR.windowed.weir.fst.mean.png)

Mean $F_{ST}$ across LG4, comparing ARI and PAR populations.

:::

### Compiling statistics with pixy

The vcftools statistics that we just calculated have a couple of
issues:

1. they have been calculated on unfiltered data; this can be somewhat
   remediated by applying a depth-based filter
2. a more concerning problem is that even if we did apply a filter,
   all missing sites would be treated as invariant sites, when in
   reality the windows would need to be adjusted to the number of
   accessible sites within a window. This number could be calculated
   from a mask file, but adds some complexity to the calculations.

Instead of applying filters, let's first try out an alternative
solution. [pixy](https://pixy.readthedocs.io/en/latest/about.html) is
a program that facilitates the calculation of nucleotide diversity
within $\pi$ and between $d_{XY}$ populations from a VCF, as well as
differentiation ($F_{ST}$). It also takes invariant sites and missing
data into consideration. Another nice feature is that by providing a
population file with all samples, every population comparison is done
on the fly, so only one run is needed!

Calculating per-site statistics takes too long time, so we will only
generate windowed output here. This may still take a couple of minutes
though.

```{bash }
#| label: 02-pixy
#| echo: true
#| eval: true
#| results: hide
mkdir -p 02-pixy
# Set your window size higher, e.g., 100kb
pixy --stats pi fst dxy \
  --vcf $VCF \
  --populations populations.txt \
  --window_size 1000 \
  --output_folder 02-pixy \
  --n_cores 4
```

```{bash }
#| label: 02-pixy-pi-head
#| echo: true
#| eval: true
head -n 3 02-pixy/pixy_pi.txt
```

For windowed output, the pixy output files contain information on the
windows, the number of missing sites, number of snps, and more. The
first column corresponds to the population, which means we can easily
select lines matching population(s) of interest. For a full
description, consult the
[documentation](https://pixy.readthedocs.io/en/latest/output.html).
Note that because we provided a population file defining two
populations, diversity is calculated per population.

We conclude by plotting diversity for ARI and PAR

```{bash }
#| label: 02-pixy-pi-plot-ari-par
#| echo: true
#| eval: true
#| results: hide
# Possibly remove NA values that otherwise would throw error
csvtk filter2 --tabs \
   --filter '$avg_pi != "NA" && ($pop == "ARI" || $pop == "PAR") ' \
   02-pixy/pixy_pi.txt | \
 csvtk plot line --tabs - -x window_pos_1 -y avg_pi \
    --group-field pop \
    --point-size 0.01 --xlab "Position (bp)" \
    --ylab "Diversity" --title "LG4:ARI and PAR" \
 --width 9.0 --height 3.5 \
    > 02-pixy/pixy_pi.ARI-PAR.txt.png
```

::: {#fig-02-pixy-fst attr-output='.details summary="Output"'}

![](02-pixy/pixy_pi.ARI-PAR.txt.png)

Mean diversity across LG4 for ARI and PAR.

:::

and $F_{ST}$ comparing ARI and PAR

```{bash }
#| label: 02-pixy-fst-plot-ari-par
#| echo: true
#| eval: true
csvtk filter2 --tabs \
   --filter '$avg_wc_fst != "NA" && $pop1 == "PAR" && $pop2 == "ARI" ' \
   02-pixy/pixy_fst.txt | \
 csvtk plot line -t - -x window_pos_1 -y avg_wc_fst \
    --point-size 0.01 --xlab "Position (bp)" \
    --ylab "Fst" --title "LG4:ARI vs PAR" --width 9.0 --height 3.5 \
    > 02-pixy/pixy_fst.ARI-PAR.txt.png
```

::: {#fig-02-pixy-fst-ARI-PAR attr-output='.details summary="Output"'}

![](02-pixy/pixy_fst.ARI-PAR.txt.png)

Mean $F_{ST}$ across LG4 for ARI vs PAR.

:::

Comparing @fig-02-pixy-fst-ARI-PAR to @fig-01-vcftools-fst shows a
stark contrast, so clearly, how you filter and handle
invariant/missing data will strongly affect the outcome.

::: {.callout-exercise}

#### OPTIONAL: Apply filters to pixy and vcftools output and compare

Generate depth filters, utilizing the knowledge from the variant
filtering lab, and apply them to the VCF file. Rerun a couple of pixy
and vcftools stats to see how it affects the outcome.

::: {.callout-hint}

FIXME: add filter values and command here

:::

:::

## Genome scans

### Working with Z-transformed data

## Monkeyflower diversity landscape

Drawing on what you learned earlier today about filtering, and with
the help of the command examples above, you can now start exploring
the Monkeyflower diversity landscape. Try different population
comparisons, perform outlier analyses, and see if you can find
candidate regions of interest. If you want inspiration, take a look at
the methods section of @stankowski_WidespreadSelectionGene_2019.

To get you started, here are some exercise templates:

::: {.callout-exercise}

#### Apply depth filter to VCF

Start by applying a depth filter to the VCF.

:::

:::{.hidden}

### Reconciling results with filters

Show how we can reconcile results? After all, pixy cannot be used for
species that lack variant sites

### Genome scan with vcftools

Since pixy takes care of everything, run Tajima's with vcftools?

### Outlier analyses

Must introduce Z-transformed stats and explain; hopefully region in
paper shows up

### Genic structure

Show an example of bed file

## Investigations

:::
