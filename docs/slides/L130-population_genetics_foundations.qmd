---
title: "Population genetics"
subtitle: "Foundations"
author:
    - "Per Unneberg"
date: "`r format(Sys.time(), '%d %B, %Y')`"
institute: NBIS
from: markdown+emoji
format:
  revealjs:
    theme:
      - white
      - ../nbis.scss
    self-contained: true
    toc: true
    toc-depth: 1
    slide-level: 3
    slide-number: true
    preview-links: true
    chalkboard: false
    footer: Population genetics foundations
    logo: https://nbis.se/assets/img/logos/nbislogo-green.svg
    smaller: true
    highlight-style: gruvbox
    fig-height: 12
    fig-width: 10
    navigation-mode: vertical
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
execute:
  echo: true
  warning: false
  cache: true
  include: true
  autodep: true
  eval: true
  error: true
opts:
  knitr:
    code-fold: true
    tidy: true
    fig-format: svg
---

### Setup  {visibility="hidden" .unnumbered .unlisted}

```{r libs}
#| echo: false
#| eval: true
#| cache: false
library(knitr)
library(ggplot2)
library(viridis)
library(dotenv)
library(gganimate)
library(patchwork)
library(tidyr)
library(pgip)
library(igraph)
bw <- theme_bw(base_size=18) %+replace% theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
theme_set(bw)
knitr::knit_hooks$set(inline = function(x) {
                      prettyNum(x, big.mark=" ")
                  })
```
```{r }
#| label: utility-functions
#| echo: false
#| eval: true
#| cache: false
```


::: {.notes }



:::


# Population genetics

::: {.notes }

From [@nei_MolecularEvolutionPhylogenetics_2000, p. 231]:

> The main subject of population genetics is to study the generation
> and maintenance of genetic polymorphism and to understand the
> mechanisms of evolution at the population level

[@casillas_MolecularPopulationGenetics_2017, p. 1026]:

> Big data samples of complete genome sequences of many individuals
> from natural populations of many species have transformed population
> genetics inferences on samples of loci to population genomics: the
> analysis of genome-wide patterns of DNA variation within and between
> species.

:::


### DNA variation



::: {.dna }

| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
| T | T | A | C | A | A | T | C | C | G  | A  | T  | C  | G  | T  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| T | C | A | C | A | A | T | G | C | G  | A  | T  | G  | G  | A  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |

: Sequence aligmnent of four DNA sequences {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

The main data for molecular population genetics are DNA sequences. The
alignment above shows a *sample* of four DNA *sequences*. Each
sequence has 15 nucleotides (*sites*) "from the same *locus*
(location) on a chromosome" [p.2
@hahn_MolecularPopulationGenetics_2019]

::: {.fragment}

Alternative names for *sequence*:

:::

::: {.incremental}

- *chromosome*
- *gene*
- *allele* (different by origin)
- *sample*
- *cistron*

:::

::: {.fragment}

We will preferentially use *sequence* or *chromosome* to refer to an
entire sequence, and *allele* to refer to individual nucleotides that
differ.

:::

### DNA variation - monomorphic sites

::: {.dna }

| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
| T | T | A | C | A | A | T | C | C | G  | A  | T  | C  | G  | T  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| T | C | A | C | A | A | T | G | C | G  | A  | T  | G  | G  | A  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| * |   | * | * |   | * | * |   | * | *  |    | *  |    | *  | T  |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

The alignment has 4 DNA sequences where each sequence has length
$L=15$. A site where all nucleotides (alleles) are identical is called
a *monomorphic* site (indicated with asterisks above). There are 9
monomorphic sites.



### DNA variation - segregating sites

::: {.dna }

| 1 | 2     | 3 | 4 | 5     | 6 | 7 | 8     | 9 | 10 | 11    | 12 | 13    | 14 | 15    |
|:-:|:-----:|:-:|:-:|:-----:|:-:|:-:|:-----:|:-:|:--:|:-----:|:--:|:-----:|:--:|:-----:|
| T | T     | A | C | A     | A | T | **C** | C | G  | A     | T  | C     | G  | T     |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
| T | **C** | A | C | A     | A | T | G     | C | G  | A     | T  | **G** | G  | **A** |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
|   | *     |   |   | *     |   |   | *     |   |    | *     |    | *     |    | *     |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

A site where there are different nucleotides (alleles) is called a
*segregating* site (indicated with asterisks above), often denoted
*S*. There are $S=6$ segregating sites.


::: {.fragment}

Alternative names for *segregating site* are:

:::

::: {.incremental}

- *polymorphism*
- *mutation*
- *single nucleotide polymorphism (SNP)*

:::


::: {.fragment}

*mutation* may refer to the process that generates new variation and
the new variants generated by this process, which is the way we will
use the term.


In contrast to *mutation* which corresponds to within-species
variation, a *substitution* refers to DNA differences between species.

:::

### DNA variation - major and minor alleles

::: {.dna }

| 1 | 2     | 3 | 4 | 5     | 6 | 7 | 8     | 9 | 10 | 11    | 12 | 13    | 14 | 15    |
|:-:|:-----:|:-:|:-:|:-----:|:-:|:-:|:-----:|:-:|:--:|:-----:|:--:|:-----:|:--:|:-----:|
| T | T     | A | C | A     | A | T | **C** | C | G  | A     | T  | C     | G  | T     |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
| T | **C** | A | C | A     | A | T | G     | C | G  | A     | T  | **G** | G  | **A** |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
|   | *     |   |   | *     |   |   | *     |   |    | *     |    | *     |    | *     |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

Much of the nucleotide variation we study consists of *bi-allelic*
SNPs. The most common variant is called the *major* allele, and the
least common the *minor* allele.


The set of alleles found on a single sequence is called *haplotype*.



### Describing DNA variation

::: {.dna }

| 1 | 2     | 3 | 4 | 5     | 6 | 7 | 8     | 9 | 10 | 11    | 12 | 13    | 14 | 15    |
|:-:|:-----:|:-:|:-:|:-----:|:-:|:-:|:-----:|:-:|:--:|:-----:|:--:|:-----:|:--:|:-----:|
| T | T     | A | C | A     | A | T | **C** | C | G  | A     | T  | C     | G  | T     |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
| T | **C** | A | C | A     | A | T | G     | C | G  | A     | T  | **G** | G  | **A** |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
|   | *     |   |   | *     |   |   | *     |   |    | *     |    | *     |    | *     |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::



Once we have a sample of sequences we want to describe the observed
variation. At any position the *i*th allele has sample frequency
$p_i$, where the sum of all allele frequencies is 1. For instance, at
site 1, $p_T=1$ (and by extension $p_A=p_C=p_G=0$), and at site 2
$p_C=1/4$ and $p_T=3/4$.

::: {.notes }

::: {.dna }

| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
| T | T | A | C | A | A | T | C | C | G  | A  | T  | C  | G  | T  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| T | C | A | C | A | A | T | G | C | G  | A  | T  | G  | G  | A  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,25]"}

:::

:::


:::: {.columns}

::: {.column width="50%"}

#### Heterozygosity

The *heterozygosity* at a site is given by

$$
h = \frac{n}{n-1}\left(1 - \sum p_i^2\right)
$$

:::

::: {.column width="50%"}

::: {.fragment}

#### Exercise: calculate the heterozygosity at sites 1 and 2

:::

::: {.fragment}

$$
h_1 = \frac{4}{3} \left(1 - p_T^2 \right) = 0 \\
h_2 = \frac{4}{3} \left(1 - \left(p_C^2 + p_T^2\right) \right) = \frac{4}{3} \left( 1 - \left(\frac{1}{16} + \frac{9}{16}\right)\right) = \frac{1}{2}
$$
:::


:::

::::


### Describing DNA variation



::: {.dna }

| 1 | 2     | 3 | 4 | 5     | 6 | 7 | 8     | 9 | 10 | 11    | 12 | 13    | 14 | 15    |
|:-:|:-----:|:-:|:-:|:-----:|:-:|:-:|:-----:|:-:|:--:|:-----:|:--:|:-----:|:--:|:-----:|
| T | T     | A | C | A     | A | T | **C** | C | G  | A     | T  | C     | G  | T     |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
| T | **C** | A | C | A     | A | T | G     | C | G  | A     | T  | **G** | G  | **A** |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
|   | *     |   |   | *     |   |   | *     |   |    | *     |    | *     |    | *     |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

:::: {.columns}

::: {.column width="50%"}

#### Nucleotide diversity $\pi$

The *nucleotide diversity* is the sum of site heterozygosities:

$$
\pi = \sum_{j=1}^S h_j
$$


:::

::: {.column width="50%"}

::: {.fragment}

#### Calculate the nucleotide diversity

:::

::: {.fragment}

Observation: $h_i$ either 1/2 or 2/3 (for sites with
$p_{major}=p_{minor}$).

:::

::: {.fragment}

$$
\pi = \frac{1}{2} + \frac{2}{3} + \frac{1}{2} + \frac{2}{3} + \frac{1}{2} + \frac{1}{2} = 3\frac{1}{3}
$$

:::

::: {.fragment}

Often we provide $\pi$ per site:

$$
\pi = 3.33/15 = 0.222
$$

:::

:::

::::


# Origin and change of variation


### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}


Model of evolution that describes sampling of alleles in a population
under the following assumptions [@hein2005gene]:

::: {.incremental}

- discrete and non-overlapping generations
- haploid individuals or two subpopulations (males and females)
- constant population size
- all individuals are equally fit
- population has no geographical or social structure
- no recombination

:::

::: {.fragment}

#### Algorithm

1. Setup starting population at time zero

:::


:::

::: {.column width="50%"}

:::

::::


::: {.notes }

See @hein_GeneGenealogies_2004 for more assumptions.

:::


### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions [@hein2005gene]:

- discrete and non-overlapping generations
- haploid individuals or two subpopulations (males and females)
- constant population size
- all individuals are equally fit
- population has no geographical or social structure
- no recombination


#### Algorithm

1. Setup starting population at time zero

:::

::: {.column width="50%"}


```{r }
#| label: wright-fisher-model-graph
#| echo: false
#| eval: true
set.seed(2023)
G <- wf_model_igraph(generations = 16)
perm <- attr(G, "perm")
n <- attr(G, "n")
g <- color.genes.igraph(G[[n]], a.color = "white", frame.color = "black")
i <- V(g)[unlist(ego(g, order = 16, nodes = c(152, 155, 158), mode = "in"))]
E(g)$color <- "gray"
E(g)[to(i)]$width <- 6
E(g)[to(i)]$color <- "black"
```


```{r }
#| label: wf-1
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(
    color.genes.igraph(G[[1]], a.color = "white",
                       frame.color = "black"), perm))
text(x = 0, y = 1.2, paste("Starting population"), cex = 2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions [@hein2005gene]:

- discrete and non-overlapping generations
- haploid individuals or two subpopulations (males and females)
- constant population size
- all individuals are equally fit
- population has no geographical or social structure
- no recombination



#### Algorithm

1. Setup starting population at time zero
2. Add offspring (same size) at time one


:::

::: {.column width="50%"}

```{r }
#| label: wf-2
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(color.genes.igraph(G[[2]], a.color = "white", frame.color = "black"), perm))
text(x = 0, y = 1.2, paste("Offspring"), cex = 2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions [@hein2005gene]:

- discrete and non-overlapping generations
- haploid individuals or two subpopulations (males and females)
- constant population size
- all individuals are equally fit
- population has no geographical or social structure
- no recombination

#### Algorithm

1. Setup starting population at time zero
2. Add offspring (same size) at time one
3. Select parents to offspring at random

:::

::: {.column width="50%"}

```{r }
#| label: wf-3
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(color.genes.igraph(G[[3]], a.color = "white", frame.color = "black"), perm))
text(x = 0, y = 1.2, paste("Sampled parents"), cex = 2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions [@hein2005gene]:

- discrete and non-overlapping generations
- haploid individuals or two subpopulations (males and females)
- constant population size
- all individuals are equally fit
- population has no geographical or social structure
- no recombination

#### Algorithm

1. Setup starting population at time zero
2. Add offspring (same size) at time one
3. Select parents to offspring at random

:::

::: {.column width="50%"}

```{r }
#| label: wf-4
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(color.genes.igraph(G[[4]], a.color = "white", frame.color = "black"), perm))
text(x = 0, y = 1.2, paste("Sampled parents"), cex = 2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}


```{r }
#| label: wright-fisher-graphical-model
#| echo: false
#| eval: true
#| fig-show: animate
#| fig-keep: all
#| fig-align: center
#| fig-height: 7
#| fig-width: 7
#| fig-cap: Wright-Fisher model
t <- 1
for (i in seq(1, length(G))) {
    if (((i + 1) %% 3) == 0)
        t <- t + 1
    plot(permute(color.genes.igraph(G[[i]], a.color = "white", frame.color = "black"), perm))
    text(x = 0, y = 1.2, paste("Generation", t), cex = 2)
}
```


:::

::: {.column width="50%" .fragment}


```{r}
#| label: fig-wf-model-genealogy
#| echo: false
#| eval: true
#| fig-cap: "Wright-Fisher model tracing the genealogies of three extant genes"
n <- attr(G, "n")
g <- color.genes.igraph(G[[n]], a.color = "white", frame.color = "black")
i <- V(g)[unlist(ego(g, order = 16, nodes = c(152, 155, 158), mode = "in"))]
E(g)$color <- "gray"
E(g)[to(i)]$width <- 6
E(g)[to(i)]$color <- "black"
par(mar = c(0, 0, 0, 0) + .1)
plot(permute(g, perm))
```

:::

::::

::: {.notes }

See https://mikeyharper.uk/animated-plots-with-r/

:::


### Genetic drift with alleles

:::: {.columns}

::: {.column width="50%"}

```{r }
#| label: fig-wright-fisher-drift-0.3-1
#| echo: false
#| eval: true
#| out-height: 100%
#| fig-align: center
#| fig-cap: Example of fixation
set.seed(1974)
G <- wf_model_igraph(p0 = 0.3, popsize = 10, generations = 16)
n <- attr(G, "n")
perm <- attr(G, "perm")
par(mar = c(0, 0, 0, 0) + .1)
plot(permute(color.genes.igraph(G[[n]]), perm))
text(x = 0, y = 1.2, paste("Generation", 16), cex = 2)
```

:::

::: {.column width="50%" .fragment}

```{r }
#| label: fig-wright-fisher-drift-0.3-2
#| echo: false
#| eval: true
#| out-height: 70%
#| fig-align: center
#| fig-cap: Example of loss
set.seed(2014)
G <- wf_model_igraph(p0=0.3, popsize=10, generations=16)
n <- attr(G, "n")
perm <- attr(G, "perm")
plot(permute(color.genes.igraph(G[[n]]), perm))
text(x=0, y=1.2, paste("Generation", 16), cex=2)
```

:::

::::

Wright-Fisher model showing the evolution of population of 10 genes
over 16 generations. Allele variants are shown in white and dark grey.

### Genetic drift

:::: {.columns}

::: {.column width="40%"}

To capture dynamics, follow allele frequency trajectory as function of
time.


```{r code=readLines("../../src/R/pgip/R/wright_fisher.R")}
#| label: wright-fisher-source
#| echo: true
#| eval: false
```


::: {.fragment fragment-index=2}

Note dependency of "jumpyness" (variance) on population size N

:::

:::

::: {.column width="60%" .fragment fragment-index=1}


```{r }
#| label: genetic-drift-example
#| echo: false
#| eval: true
set.seed(1223)
n_reps=50
n_gen=100
conditions = 4
p0 = rep(c(0.01, 0.1, 0.5, 0.8), each=conditions)
N = rep(c(50, 100, 1000, 5000), conditions)
sample=rep(seq(1, n_reps), length(N))
p0_long = rep(p0, each=n_reps)
N_long = rep(N, each=n_reps)

wf <- mapply(wright_fisher, p0_long, N_long, n_gen, SIMPLIFY=FALSE)
wf <- data.frame(frequency=unlist(wf), N=rep(N_long, each=n_gen),
                 generation=seq(1, n_gen), sample=rep(sample, each=n_gen),
                 p0=rep(p0_long, each=n_gen))
wf$N <- factor(wf$N)
wf$sample <- factor(wf$sample)
```

```{r }
#| label: fig-genetic-drift-N-10
#| echo: false
#| eval: true
#| fig-show: animate
#| fig-keep: all
#| fig-align: center
#| fig-height: 10
#| fig-width: 12
#| out-width: 100%
#| fig-cap: Genetic drift for different population sizes, starting frequency $p_0$=0.5
ggplot(subset(wf, wf$sample==1 & wf$p0 == 0.5), aes(x=generation, y=frequency)) + geom_line(size=1) + xlim(1, 100) + ylim(0, 1) + facet_wrap(. ~ N) + transition_reveal(generation)
```

:::

::::


::: {.notes }


Classic graph of allele: start at say 0.2 and drift with different Ne.
Point out that variation becomes smaller with large Ne, but that
eventually, an allele is fixed or lost (formula).

Mention *neutral* here as this is how alleles behave under drift: like
gas particle diffusing up and down


See alternative way of visualizing variation faceting on initial
frequency (showing P(fixation)) and population size (showing less
variance))

https://stephens999.github.io/fiveMinuteStats/wright_fisher_model.html


:::


### Genetic drift


```{r }
#| label: fig-genetic-drift-many-repetitions
#| echo: false
#| eval: true
#| fig-align: center
#| fig-height: 8
#| fig-width: 12
#| fig-cap: Genetic drift for different combinations of starting frequency and population size for n=50 repetitions per parameter combination. Note how variation and time to fixation depends on  population size and starting frequency.
ggplot(wf, aes(x=generation, y=frequency, group=sample)) + geom_line() + xlim(1, 100) + ylim(0, 1) + facet_grid(N ~ p0)
```



### Mutation

Drift randomly "moves" frequencies, but once lost, how does new
variation arise? Mutation.

Introduce variation at rate $2N_e\mu$

Mutation - drift balance

Infinite sites vs infinite alleles

### Selection

Relative fitness.

Define s, positive and negative selection

### Direct selection

d_N/d_S


### Two-locus dynamics

Graph focal locus and flanking loci (Charlesworth figure)

- Linkage disequilibrium and recombination (each probably need
  separate treatment)
- Contrast linked selection with direct selection
- Genetic draft / background selection


### Neutral theory

Move right after drift?

- Hahn: $\mu = \nu*f_0$
- why population size matters
- Fig 4.2, Eq 4.2 from Lynch


### Nearly neutral theory

- Distribution of fitness effects?


# A primer on simulation

If simulation section show brief code examples

### Wright-Fisher model again

Repeat WF model. Point out that it can be used for *forward*
simulation. Show how many individuals are lost each generation (limit
e-1): lose lots of compute resources on the way to extant sample.

```{r }
#| label: fig-wf-model-reproductive-success
#| echo: false
#| eval: true
#| fig-cap: Wright-Fisher model of 30 genes, 50 generations.
G <- wf_model_igraph(popsize=30, generations=50, parent.transient=FALSE)
g <- color.genes.igraph(G[[148]], a.color="white", frame.color="black")
V(g)$size <- 2
E(g)$width <- 1
E(g)$color <- "lightgray"
plot(permute(g, attr(G, "perm")))
```

::: {.fragment}

```{r }
#| label: fig-wf-model-reproductive-success-graph
#| echo: false
#| eval: true
#| fig-cap: Reproductive success in percent per generation.
x <- unlist(lapply(seq(1, length(g), attr(G, "popsize")), function(i) {sum(V(g)[i:(i+attr(G, "popsize")-1)]$reproduce, na.rm=TRUE)})) / attr(G, "popsize")
xmean <- mean(x)*100
plot(x[1:(length(x) - 1)] * 100, xlab="Generation", ylab="Reproductive success (%)", type="l")
```

Mean reproductive success = $sprintf("%.2f%%", xmean)$. Can show for
large populations P(no descendants)=$e^{-1}$

:::

::: {.notes }

[p. 15 @hein2005gene] shows the fraction of genes without descendants.
Focus on the number of descendants for *one* gene *i*, which is X ~
Bin(2N, 1/2N). Since E(X)=1, for large 2N, X is almos Po(1), such that
P(no descendants) = P(X=0) = e^{-1}

:::


### The coalescent

Introduce concept. Describe algorithm (show code - include as
exercise?). Genealogy and mutations:

- sim_ancestry
- sim_mutations

Note that #mutations propto branch length -> don't actually even need
to know the mutations (e.g. fastsimcoal)

### The coalescent: diminishing returns

Show plot of diminishing returns (better to add sites, not samples)

### The coalescent and diversity

Recalculate example

### Evolutionary processes and genealogies

Non-neutral processes change topologies in ways that we detect when
applying tests [@ferretti_DecomposingSiteFrequency_2017]

genealogies change due to non
Show some qualitative examples of how trees change for

- bottleneck

### msprime


### SLiM

Mention advances in forward simulations


### Recapitation

Combine the best of two worlds

### Recipes

Show some recipes and the pgip CLI
