---
title: "Population genetics"
subtitle: "Foundations"
author:
    - "Per Unneberg"
date: "`r format(Sys.time(), '%d %B, %Y')`"
institute: NBIS
from: markdown+emoji
format:
  revealjs:
    theme:
      - white
      - ../nbis.scss
    self-contained: true
    toc: true
    toc-depth: 1
    slide-level: 3
    slide-number: true
    preview-links: true
    chalkboard: false
    footer: Population genetics foundations
    logo: https://nbis.se/assets/img/logos/nbislogo-green.svg
    smaller: true
    highlight-style: gruvbox
    fig-height: 12
    fig-width: 10
    navigation-mode: vertical
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
execute:
  echo: true
  warning: false
  cache: true
  include: true
  autodep: true
  eval: true
  error: true
opts:
  knitr:
    code-fold: true
    tidy: true
    fig-format: svg
---

### Setup  {visibility="hidden" .unnumbered .unlisted}

```{r libs}
#| echo: false
#| eval: true
#| cache: false
library(knitr)
library(ggplot2)
library(viridis)
library(dotenv)
library(igraph)
library(gganimate)
library(patchwork)
library(tidyr)
bw <- theme_bw(base_size=18) %+replace% theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
theme_set(bw)
knitr::knit_hooks$set(inline = function(x) {
                      prettyNum(x, big.mark=" ")
                  })
```
```{r }
#| label: utility-functions
#| echo: false
#| eval: true
#| cache: false
```


::: {.notes }



:::


# Population genetics

### DNA variation



::: {.dna }

| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
| T | T | A | C | A | A | T | C | C | G  | A  | T  | C  | G  | T  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| T | C | A | C | A | A | T | G | C | G  | A  | T  | G  | G  | A  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

The main data for molecular population genetics are DNA sequences. The
alignment above shows a *sample* of four DNA *sequences*. Each
sequence has 15 nucleotides (*sites*) "from the same *locus*
(location) on a chromosome" [p.2
@hahn_MolecularPopulationGenetics_2019]

::: {.fragment}

Alternative names for *sequence*:

:::

::: {.incremental}

- *chromosome*
- *gene*
- *allele* (different by origin)
- *sample*
- *cistron*

:::

::: {.fragment}

We will preferentially use *sequence* or *chromosome* to refer to an
entire sequence, and *allele* to refer to individual nucleotides that
differ.

:::

### DNA variation - monomorphic sites

::: {.dna }

| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
| T | T | A | C | A | A | T | C | C | G  | A  | T  | C  | G  | T  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| T | C | A | C | A | A | T | G | C | G  | A  | T  | G  | G  | A  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| * |   | * | * |   | * | * |   | * | *  |    | *  |    | *  | T  |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

The alignment has 4 DNA sequences where each sequence has length
$L=15$. A site where all nucleotides (alleles) are identical is called
a *monomorphic* site (indicated with asterisks above). There are 9
monomorphic sites.



### DNA variation - segregating sites

::: {.dna }

| 1 | 2     | 3 | 4 | 5     | 6 | 7 | 8     | 9 | 10 | 11    | 12 | 13    | 14 | 15    |
|:-:|:-----:|:-:|:-:|:-----:|:-:|:-:|:-----:|:-:|:--:|:-----:|:--:|:-----:|:--:|:-----:|
| T | T     | A | C | A     | A | T | **C** | C | G  | A     | T  | C     | G  | T     |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
| T | **C** | A | C | A     | A | T | G     | C | G  | A     | T  | **G** | G  | **A** |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
|   | *     |   |   | *     |   |   | *     |   |    | *     |    | *     |    | *     |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

A site where there are different nucleotides (alleles) is called a
*segregating* site (indicated with asterisks above), often denoted
*S*. There are $S=6$ segregating sites.


::: {.fragment}

Alternative names for *segregating site* are:

:::

::: {.incremental}

- *polymorphism*
- *mutation*
- *single nucleotide polymorphism (SNP)*

:::


::: {.fragment}

*mutation* may refer to the process that generates new variation and
the new variants generated by this process, which is the way we will
use the term.


In contrast to *mutation* which corresponds to within-species
variation, a *substitution* refers to DNA differences between species.

:::

### DNA variation - major and minor alleles

::: {.dna }

| 1 | 2     | 3 | 4 | 5     | 6 | 7 | 8     | 9 | 10 | 11    | 12 | 13    | 14 | 15    |
|:-:|:-----:|:-:|:-:|:-----:|:-:|:-:|:-----:|:-:|:--:|:-----:|:--:|:-----:|:--:|:-----:|
| T | T     | A | C | A     | A | T | **C** | C | G  | A     | T  | C     | G  | T     |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
| T | **C** | A | C | A     | A | T | G     | C | G  | A     | T  | **G** | G  | **A** |
| T | T     | A | C | **G** | A | T | G     | C | G  | **C** | T  | C     | G  | T     |
|   | *     |   |   | *     |   |   | *     |   |    | *     |    | *     |    | *     |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]"}

:::

Much of the nucleotide variation we study consists of *bi-allelic*
SNPs. The most common variant is called the *major* allele, and the
least common the *minor* allele.


The set of alleles found on a single sequence is called *haplotype*.



### Describing DNA variation


::: {.dna }

| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
| T | T | A | C | A | A | T | C | C | G  | A  | T  | C  | G  | T  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| T | C | A | C | A | A | T | G | C | G  | A  | T  | G  | G  | A  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,25]"}

:::

Once we have a sample of sequences we want to describe the observed
variation. At any position the *i*th allele has sample frequency
$p_i$, where the sum of all allele frequencies is 1. For instance, at
site 1, $p_T=1$ (and by extension $p_A=p_C=p_G=0$), and at site 2
$p_C=1/4$ and $p_T=3/4$.

#### Heterozygosity

The *heterozygosity* at a site is given by

$$
h = \frac{n}{n-1}\left(1 - \sum p_i^2\right)
$$

::: {.fragment}

#### Exercise: calculate the heterozygosity at sites 1 and 2

:::

::: {.fragment}

$$
h_1 = \frac{4}{3} \left(1 - p_T^2 \right) = 0 \\
h_2 = \frac{4}{3} \left(1 - \left(p_C^2 + p_T^2\right) \right) = \frac{4}{3} \left( 1 - \left(\frac{1}{16} + \frac{9}{16}\right)\right) = \frac{1}{2}
$$
:::


### Describing DNA variation


::: {.dna }

| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
| T | T | A | C | A | A | T | C | C | G  | A  | T  | C  | G  | T  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |
| T | C | A | C | A | A | T | G | C | G  | A  | T  | G  | G  | A  |
| T | T | A | C | G | A | T | G | C | G  | C  | T  | C  | G  | T  |

: {tbl-colwidths="[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,25]"}

:::

#### Nucleotide diversity $\pi$

The *nucleotide diversity* is the sum of site heterozygosities:

$$
\pi = \sum_{j=1}^S h_j
$$

::: {.fragment}

#### Calculate the nucleotide diversity

:::

::: {.fragment}

Observation: $h_i$ either 1/2 or 2/3 (for sites with
$p_{major}=p_{minor}$).

:::

::: {.fragment}

$$
\pi = \frac{1}{2} + \frac{2}{3} + \frac{1}{2} + \frac{2}{3} + \frac{1}{2} + \frac{1}{2} = 3\frac{1}{3}
$$

:::

::: {.fragment}

Often we provide $\pi$ per site:

$$
\pi = 3.33/15 = 0.222
$$

:::

# Origin and change of variation


### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}


Model of evolution that describes sampling of alleles in a population
under the following assumptions:

::: {.incremental}

- no selection
- no mutation
- no migration
- non-overlapping generations
- random mating

:::

::: {.fragment}

#### Algorithm

1. Setup starting population at time zero

:::


:::

::: {.column width="50%"}

:::

::::


::: {.notes }

See @hein_GeneGenealogies_2004 for more assumptions.

:::


### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions:

- no selection
- no mutation
- no migration
- non-overlapping generations
- random mating


#### Algorithm

1. Setup starting population at time zero

:::

::: {.column width="50%"}


```{r }
#| label: wright-fisher-model-graph
#| echo: false
#| eval: true
wf_model_igraph <- function(width=10, height=10, offspring_first=TRUE, untangled=TRUE) {
    G <- list()
    g <- make_empty_graph()
    g <- add_vertices(g, width * height, color=NA, size=0, label=NA, frame.color=NA)
    g$perm <- unlist(lapply(seq(vcount(g), 1, - width), function(x) {seq(x - width + 1, x)}))
    g$layout <- layout_on_grid(g, width=width, height=height)
    i <- 1
    for (i in seq(1, height)) {
        n0 <- (i - 1) * width + 1
        n1 <- i * width
        if (i >= 2) {
            p0 <- (i - 2) * width + 1
            p1 <- (i - 1) * width
            parents <- sample(p0:p1, width, replace=TRUE)
            if (untangled)
                parents <- sort(parents)
            offspring <- seq((i - 1) * width + 1, i * width)
            if (offspring_first) {
                V(g)[n0:n1]$frame.color <- "black"
                V(g)[n0:n1]$color <- NA
                V(g)[n0:n1]$size <- 3
                G[[length(G) + 1]] <- g
            }
            edges <- unlist(Map(c, parents, offspring))
            V(g)[parents]$color <- "black"
            G[[length(G) + 1]] <- g
            g <- add_edges(g, edges, color="black", width=2, arrow.size=0)
        }
        V(g)[n0:n1]$frame.color <- "black"
        V(g)[n0:n1]$color <- NA
        V(g)[n0:n1]$size <- 3
        G[[length(G) + 1]] <- g
    }
    G
}
G <- wf_model_igraph()
```


```{r }
#| label: wf-1
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(G[[1]], G[[1]]$perm))
text(x=0, y=1.2, paste("Starting population"), cex=2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions:


- no selection
- no mutation
- no migration
- non-overlapping generations
- random mating



#### Algorithm

1. Setup starting population at time zero
2. Add offspring (same size) at time one


:::

::: {.column width="50%"}

```{r }
#| label: wf-2
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(G[[2]], G[[1]]$perm))
text(x=0, y=1.2, paste("Offspring"), cex=2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions:


- no selection
- no mutation
- no migration
- non-overlapping generations
- random mating


#### Algorithm

1. Setup starting population at time zero
2. Add offspring (same size) at time one
3. Select parents to offspring at random

:::

::: {.column width="50%"}

```{r }
#| label: wf-3
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(G[[3]], G[[1]]$perm))
text(x=0, y=1.2, paste("Sampled parents"), cex=2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="50%"}

Model of evolution that describes sampling of alleles in a population
under the following assumptions:


- no selection
- no mutation
- no migration
- non-overlapping generations
- random mating


#### Algorithm

1. Setup starting population at time zero
2. Add offspring (same size) at time one
3. Select parents to offspring at random

:::

::: {.column width="50%"}

```{r }
#| label: wf-4
#| echo: false
#| eval: true
#| fig-height: 7
#| fig-width: 7
plot(permute(G[[4]], G[[1]]$perm))
text(x=0, y=1.2, paste("Sampled parents"), cex=2)
```


:::

::::

### Wright-Fisher model

:::: {.columns}

::: {.column width="30%"}


Introduce model as way to understand drift. Show n=10 and
interactively/iteratively build next generation(s). Forward
simulation. (Add pgip code)

Demonstrate this is binomial sampling.

:::

::: {.column width="70%"}


```{r }
#| label: wright-fisher-graphical-model
#| echo: false
#| eval: true
#| fig-show: animate
#| fig-keep: all
#| fig-align: center
#| fig-height: 7
#| fig-width: 7
#| fig-cap: Wright-Fisher model
t <- 1
for (i in seq(1, length(G))) {
    if (((i + 1) %% 3) == 0)
        t <- t + 1
    plot(permute(G[[i]], G[[1]]$perm))
    text(x=0, y=1.2, paste("Generation", t), cex=2)
}
```


:::

::::



::: {.notes }

See https://mikeyharper.uk/animated-plots-with-r/

:::

### Genetic drift

:::: {.columns}

::: {.column width="50%"}

To capture dynamics, follow allele frequency trajectory as function of
time.



:::

::: {.column width="50%" .fragment}

```{r }
#| label: wright-fisher-example
#| echo: true
#| eval: true
wright_fisher <- function(p0, N, generations) {
    x <- vector(mode="numeric", length=generations)
    x[1] <- p0
    for (i in seq(2, length(x)))
        x[i] <- rbinom(1, size=N, prob=x[i-1]) / N
    x
}
```


:::

::::

```{r }
#| label: genetic-drift-example
#| echo: false
#| eval: true
set.seed(1223)
n_reps=50
n_gen=100
conditions = 4
p0 = rep(c(0.01, 0.1, 0.5, 0.8), each=conditions)
N = rep(c(50, 100, 1000, 5000), conditions)
sample=rep(seq(1, n_reps), length(N))
p0_long = rep(p0, each=n_reps)
N_long = rep(N, each=n_reps)

wf <- mapply(wright_fisher, p0_long, N_long, n_gen, SIMPLIFY=FALSE)
wf <- data.frame(frequency=unlist(wf), N=rep(N_long, each=n_gen),
                 generation=seq(1, n_gen), sample=rep(sample, each=n_gen),
                 p0=rep(p0_long, each=n_gen))
wf$N <- factor(wf$N)
wf$sample <- factor(wf$sample)
```

::: {.fragment}

```{r }
#| label: fig-genetic-drift-N-10
#| echo: false
#| eval: true
#| fig-show: animate
#| fig-keep: all
#| fig-align: center
#| fig-height: 10
#| fig-width: 12
#| out-width: 50%
#| fig-cap: Genetic drift for different combinations of starting frequency and population size
ggplot(subset(wf, wf$sample==1 & wf$p0 == 0.5), aes(x=generation, y=frequency)) + geom_line(size=1) + xlim(1, 100) + ylim(0, 1) + facet_wrap(. ~ N) + transition_reveal(generation)
```

:::

::: {.notes }


Classic graph of allele: start at say 0.2 and drift with different Ne.
Point out that variation becomes smaller with large Ne, but that
eventually, an allele is fixed or lost (formula).

Mention *neutral* here as this is how alleles behave under drift: like
gas particle diffusing up and down


See alternative way of visualizing variation faceting on initial
frequency (showing P(fixation)) and population size (showing less
variance))

https://stephens999.github.io/fiveMinuteStats/wright_fisher_model.html


:::


### Genetic drift


```{r }
#| label: fig-genetic-drift-many-repetitions
#| echo: false
#| eval: true
#| fig-align: center
#| fig-height: 8
#| fig-width: 12
#| fig-cap: Genetic drift for different combinations of starting frequency and population size for n=50 repetitions per parameter combination. Note how variation and time to fixation depends on  population size and starting frequency.
ggplot(wf, aes(x=generation, y=frequency, group=sample)) + geom_line() + xlim(1, 100) + ylim(0, 1) + facet_grid(N ~ p0)
```



### Mutation

Drift randomly "moves" frequencies, but once lost, how does new
variation arise? Mutation.

Introduce variation at rate $2N_e\mu$

Mutation - drift balance

Infinite sites vs infinite alleles

### Selection

Relative fitness.

Define s, positive and negative selection

### Direct selection

d_N/d_S


### Two-locus dynamics

Graph focal locus and flanking loci (Charlesworth figure)

- Linkage disequilibrium and recombination (each probably need
  separate treatment)
- Contrast linked selection with direct selection
- Genetic draft / background selection


### Neutral theory

Move right after drift?

- Hahn: $\mu = \nu*f_0$
- why population size matters
- Fig 4.2, Eq 4.2 from Lynch


### Nearly neutral theory

- Distribution of fitness effects?


# A primer on simulation

If simulation section show brief code examples

### Wright-Fisher model again

Repeat WF model. Point out that it can be used for *forward*
simulation. Show how many individuals are lost each generation (limit
e-1): lose lots of compute resources on the way to extant sample.

Solution: look backwards

### The coalescent

Introduce concept. Describe algorithm (show code - include as
exercise?). Genealogy and mutations:

- sim_ancestry
- sim_mutations

Note that #mutations propto branch length -> don't actually even need
to know the mutations (e.g. fastsimcoal)

### The coalescent: diminishing returns

Show plot of diminishing returns (better to add sites, not samples)

### The coalescent and diversity

Recalculate example

### Evolutionary processes and genealogies

Non-neutral processes change topologies in ways that we detect when
applying tests [@ferretti_DecomposingSiteFrequency_2017]

genealogies change due to non
Show some qualitative examples of how trees change for

- bottleneck

### msprime


### SLiM

Mention advances in forward simulations


### Recapitation

Combine the best of two worlds

### Recipes

Show some recipes and the pgip CLI
